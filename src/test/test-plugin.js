// this file contains a test harness that was auto-generated by fastify-openapi-glue
// running the tests directly after generation will probably fail as the parameters
// need to be manually added.

const t = require('tap');
const test = t.test;
const Fastify = require('fastify');
const fastifyPlugin = require('../index.js');

const specification = '../openApi.json';
const service = require('../service.js');

const opts = {
  specification,
  service,
};

// Operation: createSession
// URL: /session
// summary:  undefined
// req.body
//   type: object
//   properties:
//     username:
//       type: string
//     password:
//       type: string
//
// valid responses
//   '201':
//     description: Successfully logged in user
//   '400':
//     description: If missing parameters or request is malformed
//   '401':
//     description: If login failed due to wrong credentials
//

test('testing createSession', t => {
  t.plan(2);
  const fastify = Fastify();
  fastify.register(fastifyPlugin, opts);

  fastify.inject(
    {
      method: 'POST',
      url: '/session',
      payload: undefined, //insert body data here!!
      headers: undefined,
    },
    (err, res) => {
      t.error(err);
      t.strictEqual(res.statusCode, 200);
    },
  );
});

// Operation: getSession
// URL: /session
// summary:  undefined
// valid responses
//   '200':
//     description: Active session available
//   '401':
//     description: Not logged in
//

test('testing getSession', t => {
  t.plan(2);
  const fastify = Fastify();
  fastify.register(fastifyPlugin, opts);

  fastify.inject(
    {
      method: 'GET',
      url: '/session',
      payload: undefined,
      headers: undefined,
    },
    (err, res) => {
      t.error(err);
      t.strictEqual(res.statusCode, 200);
    },
  );
});

// Operation: deleteSession
// URL: /session
// summary:  undefined
// valid responses
//   '200':
//     description: Session removed
//   '401':
//     description: Not logged in
//

test('testing deleteSession', t => {
  t.plan(2);
  const fastify = Fastify();
  fastify.register(fastifyPlugin, opts);

  fastify.inject(
    {
      method: 'DELETE',
      url: '/session',
      payload: undefined,
      headers: undefined,
    },
    (err, res) => {
      t.error(err);
      t.strictEqual(res.statusCode, 200);
    },
  );
});

// Operation: getBasicAuth
// URL: /basic_auth
// summary:  undefined
// valid responses
//   '200':
//     description: Authentication succeeded
//   '401':
//     description: Authentication failed
//

test('testing getBasicAuth', t => {
  t.plan(2);
  const fastify = Fastify();
  fastify.register(fastifyPlugin, opts);

  fastify.inject(
    {
      method: 'GET',
      url: '/basic_auth',
      payload: undefined,
      headers: undefined,
    },
    (err, res) => {
      t.error(err);
      t.strictEqual(res.statusCode, 200);
    },
  );
});

// Operation: generateApiKey
// URL: /apikey
// summary:  undefined
// valid responses
//   '201':
//     description: Successfully generated a new API key
//   '401':
//     description: If login failed due to wrong credentials
//

test('testing generateApiKey', t => {
  t.plan(2);
  const fastify = Fastify();
  fastify.register(fastifyPlugin, opts);

  fastify.inject(
    {
      method: 'POST',
      url: '/apikey',
      payload: undefined,
      headers: undefined,
    },
    (err, res) => {
      t.error(err);
      t.strictEqual(res.statusCode, 200);
    },
  );
});

// Operation: getMowers
// URL: /v1/mowers
// summary:  undefined
// valid responses
//   '200':
//     description: Current available mowers
//     content:
//       application/json:
//         schema:
//           properties:
//             mowers:
//               type: array
//               description: array of mower available
//               items:
//                 type: object
//                 properties:
//                   id:
//                     type: string
//                   name:
//                     type: string
//   '401':
//     description: Not logged in
//

test('testing getMowers', t => {
  t.plan(2);
  const fastify = Fastify();
  fastify.register(fastifyPlugin, opts);

  fastify.inject(
    {
      method: 'GET',
      url: '/v1/mowers',
      payload: undefined,
      headers: undefined,
    },
    (err, res) => {
      t.error(err);
      t.strictEqual(res.statusCode, 200);
    },
  );
});

// Operation: getStatus
// URL: /v1/:mowerId/status
// summary:  undefined
// req.params
//   type: object
//   properties:
//     mowerId:
//       type: string
//       description: mower id
//   required:
//     - mowerId
//
// valid responses
//   '200':
//     description: Current status
//     content:
//       application/json:
//         schema:
//           type: object
//           properties:
//             state:
//               type: string
//               enum:
//                 - DOCKED
//                 - LAUNCHING
//                 - MOWING
//                 - DOCKING
//                 - CHARGING
//                 - STUCK
//                 - FLIPPED
//                 - MANUAL
//                 - STOP
//                 - TEST
//             batteryVoltage:
//               type: number
//               format: float
//             batteryLevel:
//               type: number
//               format: float
//             batteryChargeCurrent:
//               type: number
//               format: float
//             isCharging:
//               type: boolean
//             lastFullyChargeTime:
//               type: integer
//               format: unit32
//             lastChargeDuration:
//               type: integer
//               format: unit32
//             radioSignal:
//               type: integer
//               format: uint8
//             cutterLoad:
//               type: integer
//               format: uint8
//             cutterSpeed:
//               type: integer
//               format: int16
//             uptime:
//               type: integer
//               format: uint32
//             leftWheelSpeed:
//               type: integer
//               format: int16
//             rightWheelSpeed:
//               type: integer
//               format: int16
//             pitch:
//               type: integer
//               format: int16
//             roll:
//               type: integer
//               format: int16
//             heading:
//               type: integer
//               format: uint16
//             obstacles:
//               type: object
//               description: >-
//                 distance (in centimeters) to possible obstacles, one reading per
//                 available sensor
//               properties:
//                 left:
//                   type: integer
//                   format: uint16
//                 front:
//                   type: integer
//                   format: uint16
//                 right:
//                   type: integer
//                   format: uint16
//   '401':
//     description: Not logged in
//

test('testing getStatus', t => {
  t.plan(2);
  const fastify = Fastify();
  fastify.register(fastifyPlugin, opts);

  fastify.inject(
    {
      method: 'GET',
      url: '/v1/:mowerId/status',
      payload: undefined,
      headers: undefined,
    },
    (err, res) => {
      t.error(err);
      t.strictEqual(res.statusCode, 200);
    },
  );
});

// Operation: getSystem
// URL: /v1/:mowerId/system
// summary:  undefined
// req.params
//   type: object
//   properties:
//     mowerId:
//       type: string
//       description: mower id
//   required:
//     - mowerId
//
// valid responses
//   '200':
//     description: Current system information
//     content:
//       application/json:
//         schema:
//           type: object
//           properties:
//             name:
//               type: string
//             version:
//               type: string
//             mowerId:
//               type: string
//             totalHeap:
//               type: integer
//               format: uint32
//             freeHeap:
//               type: integer
//               format: uint32
//             minFreeHeap:
//               type: integer
//               format: uint32
//             getMaxAllocHeap:
//               type: integer
//               format: uint32
//             localTime:
//               type: string
//             settings:
//               type: object
//               properties:
//                 batteryFullVoltage:
//                   type: number
//                   format: float
//                 batteryEmptyVoltage:
//                   type: number
//                   format: float
//   '401':
//     description: Not logged in
//

test('testing getSystem', t => {
  t.plan(2);
  const fastify = Fastify();
  fastify.register(fastifyPlugin, opts);

  fastify.inject(
    {
      method: 'GET',
      url: '/v1/:mowerId/system',
      payload: undefined,
      headers: undefined,
    },
    (err, res) => {
      t.error(err);
      t.strictEqual(res.statusCode, 200);
    },
  );
});

// Operation: setState
// URL: /v1/:mowerId/state
// summary:  undefined
// req.params
//   type: object
//   properties:
//     mowerId:
//       type: string
//       description: mower id
//   required:
//     - mowerId
//
// req.body
//   type: object
//   properties:
//     state:
//       type: string
//       enum:
//         - DOCKED
//         - LAUNCHING
//         - MOWING
//         - DOCKING
//         - CHARGING
//         - STUCK
//         - FLIPPED
//         - MANUAL
//         - STOP
//         - TEST
//
// valid responses
//   '200':
//     description: Successfully changed to new state
//   '400':
//     description: Bad request (missformed JSON)
//   '401':
//     description: Not logged in
//   '422':
//     description: Unknown state requested
//

test('testing setState', t => {
  t.plan(2);
  const fastify = Fastify();
  fastify.register(fastifyPlugin, opts);

  fastify.inject(
    {
      method: 'PUT',
      url: '/v1/:mowerId/state',
      payload: undefined, //insert body data here!!
      headers: undefined,
    },
    (err, res) => {
      t.error(err);
      t.strictEqual(res.statusCode, 200);
    },
  );
});

// Operation: getLoglevel
// URL: /v1/:mowerId/loglevel
// summary:  undefined
// req.params
//   type: object
//   properties:
//     mowerId:
//       type: string
//       description: mower id
//   required:
//     - mowerId
//
// valid responses
//   '200':
//     description: Returns current loglevel
//     content:
//       application/json:
//         schema:
//           type: object
//           properties:
//             level:
//               type: integer
//               format: unit8
//               enum:
//                 - 0
//                 - 1
//                 - 2
//                 - 3
//                 - 4
//                 - 5
//                 - 6
//   '401':
//     description: Not logged in
//

test('testing getLoglevel', t => {
  t.plan(2);
  const fastify = Fastify();
  fastify.register(fastifyPlugin, opts);

  fastify.inject(
    {
      method: 'GET',
      url: '/v1/:mowerId/loglevel',
      payload: undefined,
      headers: undefined,
    },
    (err, res) => {
      t.error(err);
      t.strictEqual(res.statusCode, 200);
    },
  );
});

// Operation: setLoglevel
// URL: /v1/:mowerId/loglevel
// summary:  undefined
// req.params
//   type: object
//   properties:
//     mowerId:
//       type: string
//       description: mower id
//   required:
//     - mowerId
//
// req.body
//   type: object
//   properties:
//     level:
//       type: integer
//       format: unit8
//       enum:
//         - 0
//         - 1
//         - 2
//         - 3
//         - 4
//         - 5
//         - 6
//
// valid responses
//   '200':
//     description: Successfully set loglevel
//   '401':
//     description: Not logged in
//

test('testing setLoglevel', t => {
  t.plan(2);
  const fastify = Fastify();
  fastify.register(fastifyPlugin, opts);

  fastify.inject(
    {
      method: 'PUT',
      url: '/v1/:mowerId/loglevel',
      payload: undefined, //insert body data here!!
      headers: undefined,
    },
    (err, res) => {
      t.error(err);
      t.strictEqual(res.statusCode, 200);
    },
  );
});

// Operation: getLogmessages
// URL: /v1/:mowerId/logmessages
// summary:  undefined
// req.params
//   type: object
//   properties:
//     mowerId:
//       type: string
//       description: mower id
//   required:
//     - mowerId
//
// req.query
//   type: object
//   properties:
//     timeOffset:
//       type: string
//       description: >-
//         ISO-8601 timestamp of last message received, e.g.
//         "2020-02-25T23:31:00.889Z", will fetch next <count> newer messages after
//         that. Zero or no parameter will pick from the last messages received.
//     count:
//       type: integer
//       format: uint16
//       default: 50
//       description: Number of messages to receive
//
// valid responses
//   '200':
//     description: Returns current log messages. New lines are marked with '\n'
//     content:
//       application/json:
//         schema:
//           type: object
//           properties:
//             messages:
//               type: array
//               description: log messages (max 100 per request)
//               items:
//                 type: string
//             lastnr:
//               type: integer
//               format: uint16
//             total:
//               type: integer
//               format: uint16
//   '401':
//     description: Not logged in
//

test('testing getLogmessages', t => {
  t.plan(2);
  const fastify = Fastify();
  fastify.register(fastifyPlugin, opts);

  fastify.inject(
    {
      method: 'GET',
      url: '/v1/:mowerId/logmessages',
      payload: undefined,
      headers: undefined,
    },
    (err, res) => {
      t.error(err);
      t.strictEqual(res.statusCode, 200);
    },
  );
});

// Operation: factoryreset
// URL: /v1/:mowerId/factoryreset
// summary:  undefined
// req.params
//   type: object
//   properties:
//     mowerId:
//       type: string
//       description: mower id
//   required:
//     - mowerId
//
// valid responses
//   '200':
//     description: Successfully factory reset mower
//   '401':
//     description: Not logged in
//

test('testing factoryreset', t => {
  t.plan(2);
  const fastify = Fastify();
  fastify.register(fastifyPlugin, opts);

  fastify.inject(
    {
      method: 'PUT',
      url: '/v1/:mowerId/factoryreset',
      payload: undefined,
      headers: undefined,
    },
    (err, res) => {
      t.error(err);
      t.strictEqual(res.statusCode, 200);
    },
  );
});

// Operation: reboot
// URL: /v1/:mowerId/reboot
// summary:  undefined
// req.params
//   type: object
//   properties:
//     mowerId:
//       type: string
//       description: mower id
//   required:
//     - mowerId
//
// valid responses
//   '200':
//     description: Successfully begun rebooting mower
//   '401':
//     description: Not logged in
//

test('testing reboot', t => {
  t.plan(2);
  const fastify = Fastify();
  fastify.register(fastifyPlugin, opts);

  fastify.inject(
    {
      method: 'PUT',
      url: '/v1/:mowerId/reboot',
      payload: undefined,
      headers: undefined,
    },
    (err, res) => {
      t.error(err);
      t.strictEqual(res.statusCode, 200);
    },
  );
});

// Operation: manualForward
// URL: /v1/:mowerId/manual/forward
// summary:  undefined
// req.params
//   type: object
//   properties:
//     mowerId:
//       type: string
//       description: mower id
//   required:
//     - mowerId
//
// req.body
//   type: object
//   properties:
//     speed:
//       type: integer
//       format: int8
//       description: 0-100%
//     turnrate:
//       type: integer
//       format: int8
//       description: '-1=>-100 left, 1=>100 right. 0 = don''t turn.'
//     smooth:
//       type: boolean
//       description: smoothly take us to target speed
//
// valid responses
//   '200':
//     description: Successfully set mower to forward motion
//   '401':
//     description: Not logged in
//

test('testing manualForward', t => {
  t.plan(2);
  const fastify = Fastify();
  fastify.register(fastifyPlugin, opts);

  fastify.inject(
    {
      method: 'PUT',
      url: '/v1/:mowerId/manual/forward',
      payload: undefined, //insert body data here!!
      headers: undefined,
    },
    (err, res) => {
      t.error(err);
      t.strictEqual(res.statusCode, 200);
    },
  );
});

// Operation: manualBackward
// URL: /v1/:mowerId/manual/backward
// summary:  undefined
// req.params
//   type: object
//   properties:
//     mowerId:
//       type: string
//       description: mower id
//   required:
//     - mowerId
//
// req.body
//   type: object
//   properties:
//     speed:
//       type: integer
//       format: int8
//       description: 0-100%
//     turnrate:
//       type: integer
//       format: int8
//       description: '-1=>-100 left, 1=>100 right. 0 = don''t turn.'
//     smooth:
//       type: boolean
//       description: smoothly take us to target speed
//
// valid responses
//   '200':
//     description: Successfully set mower to backward motion
//   '401':
//     description: Not logged in
//

test('testing manualBackward', t => {
  t.plan(2);
  const fastify = Fastify();
  fastify.register(fastifyPlugin, opts);

  fastify.inject(
    {
      method: 'PUT',
      url: '/v1/:mowerId/manual/backward',
      payload: undefined, //insert body data here!!
      headers: undefined,
    },
    (err, res) => {
      t.error(err);
      t.strictEqual(res.statusCode, 200);
    },
  );
});

// Operation: manualStop
// URL: /v1/:mowerId/manual/stop
// summary:  undefined
// req.params
//   type: object
//   properties:
//     mowerId:
//       type: string
//       description: mower id
//   required:
//     - mowerId
//
// valid responses
//   '200':
//     description: Successfully stopped mower
//   '401':
//     description: Not logged in
//

test('testing manualStop', t => {
  t.plan(2);
  const fastify = Fastify();
  fastify.register(fastifyPlugin, opts);

  fastify.inject(
    {
      method: 'PUT',
      url: '/v1/:mowerId/manual/stop',
      payload: undefined,
      headers: undefined,
    },
    (err, res) => {
      t.error(err);
      t.strictEqual(res.statusCode, 200);
    },
  );
});

// Operation: manualStartCutter
// URL: /v1/:mowerId/manual/cutter_on
// summary:  undefined
// req.params
//   type: object
//   properties:
//     mowerId:
//       type: string
//       description: mower id
//   required:
//     - mowerId
//
// valid responses
//   '200':
//     description: Successfully started cutter
//   '401':
//     description: Not logged in
//

test('testing manualStartCutter', t => {
  t.plan(2);
  const fastify = Fastify();
  fastify.register(fastifyPlugin, opts);

  fastify.inject(
    {
      method: 'PUT',
      url: '/v1/:mowerId/manual/cutter_on',
      payload: undefined,
      headers: undefined,
    },
    (err, res) => {
      t.error(err);
      t.strictEqual(res.statusCode, 200);
    },
  );
});

// Operation: manualStopCutter
// URL: /v1/:mowerId/manual/cutter_off
// summary:  undefined
// req.params
//   type: object
//   properties:
//     mowerId:
//       type: string
//       description: mower id
//   required:
//     - mowerId
//
// valid responses
//   '200':
//     description: Successfully stopped cutter
//   '401':
//     description: Not logged in
//

test('testing manualStopCutter', t => {
  t.plan(2);
  const fastify = Fastify();
  fastify.register(fastifyPlugin, opts);

  fastify.inject(
    {
      method: 'PUT',
      url: '/v1/:mowerId/manual/cutter_off',
      payload: undefined,
      headers: undefined,
    },
    (err, res) => {
      t.error(err);
      t.strictEqual(res.statusCode, 200);
    },
  );
});

// Operation: getBatteryHistory
// URL: /v1/:mowerId/history/batteryVoltage
// summary:  undefined
// req.params
//   type: object
//   properties:
//     mowerId:
//       type: string
//       description: mower id
//   required:
//     - mowerId
//
// req.query
//   type: object
//   properties:
//     timeOffset:
//       type: string
//       description: >-
//         The timestamp to receive entries after, e.g. "2020-02-25T23:31:00.889Z".
//         If not specified then you get the last 30 minutes.
//     count:
//       type: integer
//       description: The numbers of items to return.
//
// valid responses
//   '200':
//     description: Battery level history
//     content:
//       application/json:
//         schema:
//           type: array
//           items:
//             type: object
//             properties:
//               time:
//                 type: string
//               voltage:
//                 type: number
//   '401':
//     description: Not logged in
//

test('testing getBatteryHistory', t => {
  t.plan(2);
  const fastify = Fastify();
  fastify.register(fastifyPlugin, opts);

  fastify.inject(
    {
      method: 'GET',
      url: '/v1/:mowerId/history/batteryVoltage',
      payload: undefined,
      headers: undefined,
    },
    (err, res) => {
      t.error(err);
      t.strictEqual(res.statusCode, 200);
    },
  );
});

// Operation: getChargeCurrent
// URL: /v1/:mowerId/history/chargeCurrent
// summary:  undefined
// req.params
//   type: object
//   properties:
//     mowerId:
//       type: string
//       description: mower id
//   required:
//     - mowerId
//
// req.query
//   type: object
//   properties:
//     timeOffset:
//       type: string
//       description: >-
//         The timestamp to receive entries after, e.g. "2020-02-25T23:31:00.889Z".
//         If not specified then you get the last 30 minutes.
//     count:
//       type: integer
//       description: The numbers of items to return.
//
// valid responses
//   '200':
//     description: Charge current history
//     content:
//       application/json:
//         schema:
//           type: array
//           items:
//             type: object
//             properties:
//               time:
//                 type: string
//               current:
//                 type: number
//   '401':
//     description: Not logged in
//

test('testing getChargeCurrent', t => {
  t.plan(2);
  const fastify = Fastify();
  fastify.register(fastifyPlugin, opts);

  fastify.inject(
    {
      method: 'GET',
      url: '/v1/:mowerId/history/chargeCurrent',
      payload: undefined,
      headers: undefined,
    },
    (err, res) => {
      t.error(err);
      t.strictEqual(res.statusCode, 200);
    },
  );
});

// Operation: getCutterLoad
// URL: /v1/:mowerId/history/cutterLoad
// summary:  undefined
// req.params
//   type: object
//   properties:
//     mowerId:
//       type: string
//       description: mower id
//   required:
//     - mowerId
//
// req.query
//   type: object
//   properties:
//     timeOffset:
//       type: string
//       description: >-
//         The timestamp to receive entries after, e.g. "2020-02-25T23:31:00.889Z".
//         If not specified then you get the last 30 minutes.
//     count:
//       type: integer
//       description: The numbers of items to return.
//
// valid responses
//   '200':
//     description: Cutter load history
//     content:
//       application/json:
//         schema:
//           type: array
//           items:
//             type: object
//             properties:
//               time:
//                 type: string
//               load:
//                 type: number
//   '401':
//     description: Not logged in
//

test('testing getCutterLoad', t => {
  t.plan(2);
  const fastify = Fastify();
  fastify.register(fastifyPlugin, opts);

  fastify.inject(
    {
      method: 'GET',
      url: '/v1/:mowerId/history/cutterLoad',
      payload: undefined,
      headers: undefined,
    },
    (err, res) => {
      t.error(err);
      t.strictEqual(res.statusCode, 200);
    },
  );
});

// Operation: getPositionHistory
// URL: /v1/:mowerId/history/position
// summary:  undefined
// req.params
//   type: object
//   properties:
//     mowerId:
//       type: string
//       description: mower id
//   required:
//     - mowerId
//
// req.query
//   type: object
//   properties:
//     timeOffset:
//       type: string
//       description: >-
//         The timestamp to receive entries after, e.g. "2020-02-25T23:31:00.889Z".
//         If not specified then you get the last 30 minutes.
//     count:
//       type: integer
//       description: The numbers of items to return.
//
// valid responses
//   '200':
//     description: GNSS-position history
//     content:
//       application/json:
//         schema:
//           type: array
//           items:
//             type: object
//             properties:
//               lat:
//                 type: number
//                 format: double
//                 description: GNSS-latitude
//               lng:
//                 type: number
//                 format: double
//                 description: GNSS-longitude
//               pitch:
//                 type: integer
//                 format: int16
//               roll:
//                 type: integer
//                 format: int16
//               heading:
//                 type: integer
//                 format: uint16
//   '401':
//     description: Not logged in
//

test('testing getPositionHistory', t => {
  t.plan(2);
  const fastify = Fastify();
  fastify.register(fastifyPlugin, opts);

  fastify.inject(
    {
      method: 'GET',
      url: '/v1/:mowerId/history/position',
      payload: undefined,
      headers: undefined,
    },
    (err, res) => {
      t.error(err);
      t.strictEqual(res.statusCode, 200);
    },
  );
});

// Operation: createScheduleEntry
// URL: /v1/:mowerId/schedules
// summary:  undefined
// req.params
//   type: object
//   properties:
//     mowerId:
//       type: string
//       description: mower id
//   required:
//     - mowerId
//
// req.body
//   properties:
//     activeWeekdays:
//       type: array
//       description: >-
//         Array of weekdays (starting with monday, tuesday...). True means mowing
//         should be conducted this day of the week.
//       items:
//         type: boolean
//       minItems: 7
//       maxItems: 7
//     startTime:
//       type: string
//       description: >-
//         Time when mowing should begin. In the format "HH:MM", and we use a 24
//         hours notation.
//     stopTime:
//       type: string
//       description: >-
//         Time when mowing should end. In the format "HH:MM", and we use a 24 hours
//         notation.
//
// valid responses
//   '201':
//     description: Successfully added schedule
//   '400':
//     description: If missing parameters or request is malformed
//   '401':
//     description: Not logged in
//

test('testing createScheduleEntry', t => {
  t.plan(2);
  const fastify = Fastify();
  fastify.register(fastifyPlugin, opts);

  fastify.inject(
    {
      method: 'POST',
      url: '/v1/:mowerId/schedules',
      payload: undefined, //insert body data here!!
      headers: undefined,
    },
    (err, res) => {
      t.error(err);
      t.strictEqual(res.statusCode, 200);
    },
  );
});

// Operation: getSchedules
// URL: /v1/:mowerId/schedules
// summary:  undefined
// req.params
//   type: object
//   properties:
//     mowerId:
//       type: string
//       description: mower id
//   required:
//     - mowerId
//
// valid responses
//   '200':
//     description: List of schedule entries
//     content:
//       application/json:
//         schema:
//           type: array
//           items:
//             type: object
//             properties:
//               activeWeekdays:
//                 type: array
//                 description: >-
//                   Array of weekdays (starting with monday, tuesday...). True means
//                   mowing should be conducted this day of the week.
//                 items:
//                   type: boolean
//                 minItems: 7
//                 maxItems: 7
//               startTime:
//                 type: string
//                 description: >-
//                   Time when mowing should begin. In the format "HH:MM", and we use
//                   a 24 hours notation.
//               stopTime:
//                 type: string
//                 description: >-
//                   Time when mowing should end. In the format "HH:MM", and we use a
//                   24 hours notation.
//   '401':
//     description: Not logged in
//

test('testing getSchedules', t => {
  t.plan(2);
  const fastify = Fastify();
  fastify.register(fastifyPlugin, opts);

  fastify.inject(
    {
      method: 'GET',
      url: '/v1/:mowerId/schedules',
      payload: undefined,
      headers: undefined,
    },
    (err, res) => {
      t.error(err);
      t.strictEqual(res.statusCode, 200);
    },
  );
});

// Operation: deleteScheduleEntry
// URL: /v1/:mowerId/schedules/:position
// summary:  undefined
// req.params
//   type: object
//   properties:
//     mowerId:
//       type: string
//       description: mower id
//     position:
//       type: integer
//       description: Position in list (starting with 0)
//   required:
//     - mowerId
//     - position
//
// valid responses
//   '200':
//     description: Schedule entry removed
//   '401':
//     description: Not logged in
//

test('testing deleteScheduleEntry', t => {
  t.plan(2);
  const fastify = Fastify();
  fastify.register(fastifyPlugin, opts);

  fastify.inject(
    {
      method: 'DELETE',
      url: '/v1/:mowerId/schedules/:position',
      payload: undefined,
      headers: undefined,
    },
    (err, res) => {
      t.error(err);
      t.strictEqual(res.statusCode, 200);
    },
  );
});

// Operation: createPerimeter
// URL: /v1/:mowerId/perimeters
// summary:  undefined
// req.params
//   type: object
//   properties:
//     mowerId:
//       type: string
//       description: mower id
//   required:
//     - mowerId
//
// req.body
//   type: array
//   items:
//     type: object
//     properties:
//       outerPerimeter:
//         type: object
//         properties:
//           lat:
//             type: array
//             items:
//               type: number
//               format: double
//               description: GNSS-latitude
//           lng:
//             type: array
//             items:
//               type: number
//               format: double
//               description: GNSS-longitude
//       perimeters:
//         type: array
//         items:
//           type: object
//           properties:
//             name:
//               type: string
//             lat:
//               type: array
//               items:
//                 type: number
//                 format: double
//                 description: GNSS-latitude
//             lng:
//               type: array
//               items:
//                 type: number
//                 format: double
//                 description: GNSS-longitude
//
// valid responses
//   '201':
//     description: Successfully added perimeter
//   '400':
//     description: If missing parameters or request is malformed
//   '401':
//     description: Not logged in
//

test('testing createPerimeter', t => {
  t.plan(2);
  const fastify = Fastify();
  fastify.register(fastifyPlugin, opts);

  fastify.inject(
    {
      method: 'POST',
      url: '/v1/:mowerId/perimeters',
      payload: undefined, //insert body data here!!
      headers: undefined,
    },
    (err, res) => {
      t.error(err);
      t.strictEqual(res.statusCode, 200);
    },
  );
});
